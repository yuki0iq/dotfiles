(defpoll load_average :interval "10s" "</proc/loadavg cut -d' ' -f1")
(defpoll ping_dns :interval "10s" "ping -c1 -W0.1 1.1.1.1 >/dev/null; echo $?")
(defpoll battery :interval "15s" "~/.config/eww/scripts/battery")
(defpoll wifi :interval "5s" "~/.config/eww/scripts/wifi status")
(deflisten swayws "~/.config/eww/scripts/workspaces")
(deflisten sound_out "~/.config/eww/scripts/sound sink")
(deflisten swaykb "~/.config/eww/scripts/keyboard")
(deflisten swaywin "~/.config/eww/scripts/window")
(deflisten brightness "~/.config/eww/scripts/backlight")

(defwidget left [] (box :orientation "h" :space-evenly false :halign "start"
  (current)))
(defwidget center [] (box :orientation "h" :space-evenly false :halign "center"
  (clock_module) (keyboard)))
(defwidget right [] (box :orientation "h" :space-evenly false :halign "end"
  (sys)))

(defwidget bar_impl [] (box :class "window" :orientation "h"
  (left) (center) (right)))

(defwindow bar :geometry (geometry :width "100%" :anchor "top center")
  :stacking "fg" :windowtype "dock" :exclusive true
  (bar_impl))



(defvar time_rev false)
(defwidget clock_module []
  (eventbox :onhover "eww update time_rev=true" :onhoverlost "eww update time_rev=false" :onclick "~/kek/dotfiles/home/.config/eww/scripts/pop calendar"
    (box :class "module" :space-evenly "false" :orientation "h" :spacing "3"
      (label :class "spaced clock_date" :text {formattime(EWW_TIME, time_rev ? '%A, %Y-%b-%d' : '%b %d, %a')})
      (label :class "spaced clock_time" :text {formattime(EWW_TIME, '%T')}))))

(defwidget cal [] (box :class "window cal_win" :orientation "v" (box :class "cal-in" (calendar :class "cal"))))
(defwindow calendar :geometry (geometry :anchor "top center") (cal))

(defwidget keyboard []
  (eventbox ; switch layout on click? who needs this anyway
    (box :class "module" :space-evenly false
      (for kb in {[jq(swaykb, 
        "select(.change == \"xkb_layout\")
        | .input
        | select(.type == \"keyboard\")
        | .xkb_active_layout_name
        | {name: ., short: .[:2] | ascii_downcase}")]}
        (label :class "spaced keyboard" :text {kb.short} :tooltip {kb.name})))))



(defwidget current []
  (eventbox :onclick "~/kek/dotfiles/home/.config/sway/wss"
    (box :class "sys_button" :space-evenly false
      (box :class "workspace" :orientation "h" :space-evenly false
        :tooltip "Active workspaces: ${jq(swayws, '{out: [.[].name] | join(\", \")}').out}"
        ; NOTE that here we show ONLY ONE workspace!!
        (for ws in {jq(swayws, "[.[] | select(.visible == true and .focused == true)][:1]")}
          (box :class "workspace"
            (label :class "visible workspace" :text {replace(ws.name, '10', '0')}))))
      (box (for win in {[jq(swaywin,
        "(
          (select(.change == \"focus\") | (.current // .container))
          //
          (select(.change == \"title\") | .container | select(.focused == true))
        ) | select(.visible != false)")]}
        (label :class "spaced winclass" :tooltip {win.name}
          :text {win.shell == "xdg_shell" ? win.app_id : win.shell != "null" ? win.shell : ''})))
      (for q in {[jq(swayws, "[.[] | select(.urgent == true)]")]}
        (circular-progress :thickness 8
          (button :class "urgent_mark"
            :tooltip "Urgent workspaces: ${jq(q, '{out: [.[].name] | join(\", \")}').out}"
            :visible {arraylength(q) != 0} "　"))))))


(defwidget sys []
  (eventbox
    (box :class "sys_icons"
      (box
        (for q in {[ping_dns]}  ; Ohhhh I hate the 'functional' purity you push on me *here*
          (circular-progress :thickness 5
            (button :class "ns_${q == 0 ? 'ok' : 'fail'}"
              :tooltip "network ${q == 0 ? 'ok' : 'unreachable'}"
              "　"))))
      (box
        (circular-progress :value {sound_out.vol} :class "circle_bar volume" :thickness 3.5
          (button :class "icon volume"
            :tooltip "output volume ${sound_out.vol}% ${sound_out.muted == true ? 'muted' : ''}"
            :onclick "pavucontrol &"
            {sound_out.muted == true ? "--" : "　"})))
      (box
        (circular-progress :value {EWW_CPU['avg']} :class "circle_bar cpu" :thickness 3.5
          (button :class "icon cpu"
            :tooltip "cpu load ${round(EWW_CPU['avg'], 1)}%, lavg ${load_average}"
            "　")))
      (box
        (circular-progress :value {EWW_RAM['used_mem_perc']} :class "circle_bar memory" :thickness 3.5
          (button :class "icon memory"
            :tooltip "ram usage ${round(EWW_RAM['used_mem_perc'], 1)}%"
            "　")))
      (box :visible {wifi == "" ? false : wifi.State == "connected"}
        (circular-progress :value {150 + 2 * replace(wifi.AverageRSSI, " dBm", "")} :class "circle_bar wifi" :thickness 3.5
          (button :class "icon wifi"
            :tooltip "${wifi.Connected_network}"
            "　")))
      (box :visible {battery == "" ? false : battery.status != "unknown"}
        (circular-progress :value {battery.level / 10} :class "circle_bar battery" :thickness 3.5
          (button :class "icon battery"
            :tooltip "battery on ${battery.level / 10}%, ${battery.status}"
            {battery.status == 'charging' ? "↑" :
              battery.status == 'not charging' ? "+" :
              battery.status == 'discharging' ? "↓" : "　"}))))))

(defpoll load_average :interval "10s" "</proc/loadavg cut -d' ' -f1")
(defpoll ping_dns :interval "10s" "ping -c1 -W0.1 1.1.1.1 >/dev/null; echo $?")
(defpoll battery :interval "15s" "~/.config/eww/scripts/battery")
(defpoll wifi :interval "5s" "~/.config/eww/scripts/wifi status")
(deflisten sound_out "~/.config/eww/scripts/sound sink")
(deflisten swaynyaa "exec ~/kek/swaynyaad/target/release/swaynyaad")
(deflisten brightness "~/.config/eww/scripts/backlight")

(defwidget left [] (box :orientation "h" :space-evenly false :class "widget" :halign "start"
  (current)))
(defwidget center [] (box :orientation "h" :space-evenly false :class "widget" :halign "center"
  (clock_module) (keyboard)))
(defwidget right [] (box :orientation "h" :space-evenly false :class "widget" :halign "end"
  (sys)))

(defwidget bar_impl [] (box :class "window" :orientation "h"
  (left) (center) (right)))

(defwindow bar :geometry (geometry :width "100%" :anchor "top center")
  :stacking "fg" :windowtype "dock" :exclusive true
  (bar_impl))



(defvar time_rev false)
(defwidget clock_module []
  (eventbox :onhover "eww update time_rev=true" :onhoverlost "eww update time_rev=false" :onclick "~/kek/dotfiles/home/.config/eww/scripts/pop calendar"
    (box :class "module" :space-evenly "false" :orientation "h" :spacing "3"
      (label :class "spaced clock_date" :text {formattime(EWW_TIME, time_rev ? '%A, %Y-%b-%d' : '%b %d, %a')})
      (label :class "spaced clock_time" :text {formattime(EWW_TIME, '%T')}))))

(defwidget cal [] (box :class "window cal_win" :orientation "v" (box :class "cal-in" (calendar :class "cal"))))
(defwindow calendar :geometry (geometry :anchor "top center") (cal))

(defwidget keyboard []
  (eventbox ; switch layout on click? who needs this anyway
    (box :class "module" :space-evenly false
        (label :class "spaced keyboard" :text {swaynyaa.layout_short_name} :tooltip {swaynyaa.layout_name}))))



(defwidget current []
  (eventbox :onclick "~/kek/dotfiles/home/.config/sway/wss"
    (box :class "sys_button" :space-evenly false
      (box :class "workspace" :orientation "h" :space-evenly false
        :tooltip "Active workspaces: ${swaynyaa.workspaces_existing}"
        (box :class "workspace"
          (label :class "visible workspace" :text {replace(swaynyaa.workspace_focused, '10', '0')})))
      (label :class "spaced winclass" :tooltip {swaynyaa.window_focused_name}
        :text {
          swaynyaa.window_focused_shell == "xdg_shell"
          ? swaynyaa.window_focused_app_id
          : swaynyaa.window_focused_shell != "null"
            ? swaynyaa.window_focused_shell
            : ''})
        (circular-progress :thickness 8
          (button :class "urgent_mark"
            :tooltip "Urgent workspaces: ${swaynyaa.workspaces_urgent}"
            :visible {arraylength(swaynyaa.workspaces_urgent) != 0} "　")))))


(defwidget sys []
  (eventbox
    (box :class "sys_icons"
      (box
        (for q in {[ping_dns]}  ; Ohhhh I hate the 'functional' purity you push on me *here*
          (circular-progress :thickness 5
            (button :class "ns_${q == 0 ? 'ok' : 'fail'}"
              :tooltip "network ${q == 0 ? 'ok' : 'unreachable'}"
              "　"))))
      (box
        (circular-progress :value {sound_out.vol} :class "circle_bar volume" :thickness 3.5
          (button :class "icon volume"
            :tooltip "output volume ${sound_out.vol}% ${sound_out.muted == true ? 'muted' : ''}"
            :onclick "pavucontrol &"
            {sound_out.muted == true ? "--" : "　"})))
      (box
        (circular-progress :value {EWW_CPU['avg']} :class "circle_bar cpu" :thickness 3.5
          (button :class "icon cpu"
            :tooltip "cpu load ${round(EWW_CPU['avg'], 1)}%, lavg ${load_average}"
            "　")))
      (box
        (circular-progress :value {EWW_RAM['used_mem_perc']} :class "circle_bar memory" :thickness 3.5
          (button :class "icon memory"
            :tooltip "ram usage ${round(EWW_RAM['used_mem_perc'], 1)}%"
            "　")))
      (box :visible {wifi == "" ? false : wifi.State == "connected"}
        (circular-progress :value {150 + 2 * replace(wifi.AverageRSSI, " dBm", "")} :class "circle_bar wifi" :thickness 3.5
          (button :class "icon wifi"
            :tooltip "${wifi.Connected_network}"
            "　")))
      (box :visible {battery == "" ? false : battery.status != "unknown"}
        (circular-progress :value {battery.level / 10} :class "circle_bar battery" :thickness 3.5
          (button :class "icon battery"
            :tooltip "battery on ${battery.level / 10}%, ${battery.status}"
            {battery.status == 'charging' ? "↑" :
              battery.status == 'not charging' ? "+" :
              battery.status == 'discharging' ? "↓" : "　"}))))))

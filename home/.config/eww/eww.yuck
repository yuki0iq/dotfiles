(defpoll load_average :interval "10s" "</proc/loadavg cut -d' ' -f1")
(defpoll ping_dns :initial "1" :interval "10s" "ping -c1 -W0.1 1.1.1.1 >/dev/null; echo $?")
(defpoll battery :initial "{}" :interval "15s" "~/.config/eww/scripts/battery")
(defpoll wifi :initial "{}" :interval "5s" "~/.config/eww/scripts/wifi status")
(deflisten sound :initial "{}" "exec ~/.config/eww/scripts/sound.awk < <(pactl -fjson subscribe)")
(deflisten swaynyaa :initial "{}" "exec ~/kek/swaynyaad/target/release/swaynyaad --listener")

(defwidget left [screen] (box :orientation "h" :space-evenly false :class "widget" :halign "start"
  (current :screen screen)))
(defwidget center [screen-id] (box :orientation "h" :space-evenly false :class "widget" :halign "center"
  (clock_module :screen-id screen-id) (keyboard)))
(defwidget right [] (box :orientation "h" :space-evenly false :class "widget" :halign "end"
  (sys)))

(defwidget bar_impl [screen screen-id] (box :class "window" :orientation "h"
  (left :screen screen) (center :screen-id screen-id) (right)))

(defwindow bar [monitor screen] :geometry (geometry :width "100%" :anchor "top center")
  :stacking "fg" :windowtype "dock" :exclusive true
  (bar_impl :screen monitor :screen-id screen))



(defvar time_rev false)
(defwidget clock_module [screen-id]
  (eventbox :onhover "eww update time_rev=true" :onhoverlost "eww update time_rev=false" :onclick "~/kek/dotfiles/home/.config/eww/scripts/pop calendar ${screen-id}"
    (box :class "module" :space-evenly "false" :orientation "h" :spacing "3"
      (label :class "spaced clock_date" :text {formattime(EWW_TIME, time_rev ? '%A, %Y-%b-%d' : '%b %-d, %a')})
      (label :class "spaced clock_time" :text {formattime(EWW_TIME, '%T')}))))

(defwidget cal [] (box :class "window cal_win" :orientation "v" (box :class "cal-in" (calendar :class "cal"))))
(defwindow calendar :geometry (geometry :anchor "top center") (cal))

(defwidget keyboard []
  (eventbox ; switch layout on click? who needs this anyway
    (box :class "module" :space-evenly false
        (label :class "spaced keyboard" :text {swaynyaa?.layout_short_name} :tooltip {swaynyaa?.layout_name}))))



(defwidget current [screen]
  (eventbox :onclick "~/kek/dotfiles/home/.config/sway/wss"
    (box :class "sys_button" :space-evenly false
      (label :class "workspace"
        :tooltip "Active workspaces: ${swaynyaa?.workspaces_existing}"
        :text {replace(swaynyaa?.screens?.[screen]?.workspace, '10', '0')})

      (label :class "spaced"
        :visible {swaynyaa?.screen_focused == screen}
        :text "this")

      (label :class "spaced winclass"
        :visible {swaynyaa?.screens?.[screen]?.shell != 'null'}
        :tooltip {swaynyaa?.screens?.[screen]?.name}
        :text {
          swaynyaa?.screens?.[screen]?.shell == "xdg_shell"
          ? swaynyaa?.screens?.[screen]?.app_id
          : swaynyaa?.screens?.[screen]?.shell != "null"
            ? swaynyaa?.screens?.[screen]?.shell
            : ''})

      (circular-progress :thickness 8
        :visible {arraylength(swaynyaa?.workspaces_urgent ?: []) != 0}
        (button :class "urgent_mark"
          :tooltip "Urgent workspaces: ${swaynyaa?.workspaces_urgent}"
          "　")))))


(defwidget sys []
  (eventbox
    (box :class "sys_icons" :space-evenly false
      (circular-progress :thickness 5
        (button :class "ns_${ping_dns == 0 ? 'ok' : 'fail'}"
          :tooltip "network ${ping_dns == 0 ? 'ok' : 'unreachable'}"
          "　"))

      (image
        :tooltip {wifi?.Connected_network}
        :visible {wifi == "" ? false : wifi?.State == ''}
        :icon "network-wireless-${
          wifi?.State == 'disconnected' ? 'offline' :
          (replace(wifi?.AverageRSSI, ' dBm', '') ?: -100) >= -25 ? 'signal-excellent' :
          (replace(wifi?.AverageRSSI, ' dBm', '') ?: -100) >= -35 ? 'signal-good' :
          (replace(wifi?.AverageRSSI, ' dBm', '') ?: -100) >= -45 ? 'signal-ok' :
          (replace(wifi?.AverageRSSI, ' dBm', '') ?: -100) >= -55 ? 'signal-weak' : 'signal-none'
        }")

      (eventbox
        :onclick "exec pavucontrol &"
        (image
          :tooltip "output volume ${sound?.out?.vol}% ${sound?.out?.muted == true ? 'muted' : ''}"
          :icon "audio-volume-${
            sound?.out?.muted == true ? 'muted' :
            sound?.out?.vol == 'null' ? 'muted' :
            sound?.out?.vol >= 50 ? 'high' :
            sound?.out?.vol >= 25 ? 'medium' :
            sound?.out?.vol > 0 ? 'low' : 'muted'}"))

      (eventbox
        :onclick "exec pavucontrol &"
        (image
          :tooltip "input volume ${sound?.in?.vol}% ${sound?.in?.muted == true ? 'muted' : ''}"
          :icon "mic-volume-${
            sound?.in?.muted == true ? 'muted' :
            sound?.in?.vol == 'null' ? 'muted' :
            sound?.in?.vol >= 50 ? 'high' :
            sound?.in?.vol >= 25 ? 'medium' :
            sound?.in?.vol > 0 ? 'low' : 'muted'}"))

      (image
        :tooltip "${battery?.status} at ${battery?.level ?: 0 / 10}%"
        :visible {battery == "" ? false : battery?.icon != ""}
        :icon {battery?.icon})

      (circular-progress :value {EWW_CPU['avg']} :class "circle_bar cpu" :thickness 3.5
        (button :class "icon cpu"
          :tooltip "cpu load ${round(EWW_CPU['avg'], 1)}%, lavg ${load_average ?: '??'}"
          "　"))

      (circular-progress :value {EWW_RAM['used_mem_perc']} :class "circle_bar memory" :thickness 3.5
        (button :class "icon memory"
          :tooltip "ram usage ${round(EWW_RAM['used_mem_perc'], 1)}%"
          "　")))))
